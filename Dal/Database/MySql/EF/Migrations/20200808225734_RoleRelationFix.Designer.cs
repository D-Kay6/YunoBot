// <auto-generated />
using System;
using Dal.Database.MySql.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dal.Database.MySql.EF.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200808225734_RoleRelationFix")]
    partial class RoleRelationFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entity.Ban", b =>
                {
                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("Ban");
                });

            modelBuilder.Entity("Core.Entity.CommandSetting", b =>
                {
                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("ServerId");

                    b.ToTable("CommandSetting");
                });

            modelBuilder.Entity("Core.Entity.CustomCommand", b =>
                {
                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Command")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.HasKey("ServerId", "Command");

                    b.ToTable("CustomCommand");
                });

            modelBuilder.Entity("Core.Entity.DynamicChannel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServerId", "Type")
                        .IsUnique();

                    b.ToTable("DynamicChannel");
                });

            modelBuilder.Entity("Core.Entity.DynamicRole", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.HasIndex("Type", "Status")
                        .IsUnique();

                    b.ToTable("DynamicRole");
                });

            modelBuilder.Entity("Core.Entity.DynamicRoleData", b =>
                {
                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("DynamicRoleId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("RoleId", "DynamicRoleId");

                    b.HasIndex("DynamicRoleId");

                    b.ToTable("DynamicRoleData");
                });

            modelBuilder.Entity("Core.Entity.DynamicRoleIgnore", b =>
                {
                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("ServerId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DynamicRoleIgnore");
                });

            modelBuilder.Entity("Core.Entity.GeneratedChannel", b =>
                {
                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ChannelId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("ServerId", "ChannelId");

                    b.ToTable("GeneratedChannel");
                });

            modelBuilder.Entity("Core.Entity.LanguageSetting", b =>
                {
                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.HasKey("ServerId");

                    b.ToTable("LanguageSetting");
                });

            modelBuilder.Entity("Core.Entity.ReactionRole", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("Message")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Reaction")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("ReactionRole");
                });

            modelBuilder.Entity("Core.Entity.ReactionRoleData", b =>
                {
                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ReactionRoleId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("RoleId", "ReactionRoleId");

                    b.HasIndex("ReactionRoleId");

                    b.ToTable("ReactionRoleData");
                });

            modelBuilder.Entity("Core.Entity.Role", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Core.Entity.Server", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("Core.Entity.User", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Core.Entity.WelcomeMessage", b =>
                {
                    b.Property<ulong>("ServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("ChannelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<bool>("UseImage")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ServerId");

                    b.ToTable("WelcomeMessage");
                });

            modelBuilder.Entity("Core.Entity.Ban", b =>
                {
                    b.HasOne("Core.Entity.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.User", "User")
                        .WithMany("Bans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.CommandSetting", b =>
                {
                    b.HasOne("Core.Entity.Server", "Server")
                        .WithOne("CommandSetting")
                        .HasForeignKey("Core.Entity.CommandSetting", "ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.CustomCommand", b =>
                {
                    b.HasOne("Core.Entity.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.DynamicChannel", b =>
                {
                    b.HasOne("Core.Entity.Server", "Server")
                        .WithMany("DynamicChannels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.DynamicRole", b =>
                {
                    b.HasOne("Core.Entity.Server", "Server")
                        .WithMany("DynamicRoles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.DynamicRoleData", b =>
                {
                    b.HasOne("Core.Entity.DynamicRole", "DynamicRole")
                        .WithMany("Roles")
                        .HasForeignKey("DynamicRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.DynamicRoleIgnore", b =>
                {
                    b.HasOne("Core.Entity.Server", "Server")
                        .WithMany("IgnoredUsers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entity.User", "User")
                        .WithMany("IgnoredRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.GeneratedChannel", b =>
                {
                    b.HasOne("Core.Entity.Server", "Server")
                        .WithMany("GeneratedChannels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.LanguageSetting", b =>
                {
                    b.HasOne("Core.Entity.Server", "Server")
                        .WithOne("LanguageSetting")
                        .HasForeignKey("Core.Entity.LanguageSetting", "ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.ReactionRole", b =>
                {
                    b.HasOne("Core.Entity.Server", "Server")
                        .WithMany("ReactionRoles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.ReactionRoleData", b =>
                {
                    b.HasOne("Core.Entity.ReactionRole", "ReactionRole")
                        .WithMany("Roles")
                        .HasForeignKey("ReactionRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entity.WelcomeMessage", b =>
                {
                    b.HasOne("Core.Entity.Server", "Server")
                        .WithOne("WelcomeMessage")
                        .HasForeignKey("Core.Entity.WelcomeMessage", "ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
